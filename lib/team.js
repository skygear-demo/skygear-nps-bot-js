'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const skygear = require('skygear');
const Bot = require('./bot');
const db = require('./db');
const Survey = require('./survey');

module.exports = class Team {
  constructor(record) {
    this._record = record;
  }

  // create
  static get Record() {
    return skygear.Record.extend('team');
  }

  static create(slackID, token, targetsID) {
    return _asyncToGenerator(function* () {
      const record = yield db.save(new Team.Record({ slackID, token, targetsID }));
      return new Team(record);
    })();
  }

  // read
  get slackID() {
    return this._record['slackID'];
  }

  get token() {
    return this._record['token'];
  }

  get targetsID() {
    return this._record['targetsID'];
  }

  static of(slackID) {
    return _asyncToGenerator(function* () {
      const query = new skygear.Query(Team.Record);
      query.equalTo('slackID', slackID);

      const result = yield db.query(query);
      if (result.length > 1) {
        throw new Error(`Mutiple teams with identical slackID ${slackID} found`);
      }
      return result[0] ? new Team(result[0]) : null;
    })();
  }

  // update
  set token(newValue) {
    this._record['token'] = newValue;
  }

  set targetsID(newValue) {
    this._record['targetsID'] = newValue;
  }

  update() {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this._record = yield db.save(_this._record);
    })();
  }

  // misc
  get bot() {
    return new Bot(this.token);
  }

  get members() {
    return this.bot.fetchUsers();
  }

  get scheduledSurvey() {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', this.slackID);
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error('Mutiple scheduled survey found');
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }

  get activeSurvey() {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', this.slackID);
    query.equalTo('isSent', true);
    query.equalTo('isClosed', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error('Mutiple active survey found');
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }

  getSurveys(number) {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', this.slackID);
    query.equalTo('isSent', true);
    query.addDescending('_updated_at');
    query.limit = number;
    return db.query(query).then(result => {
      const surveys = [];
      for (let i = 0; i < result.length; i++) {
        surveys.push(new Survey(result[i]));
      }
      return surveys;
    });
  }

  getAllSurveys() {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', this.slackID);
    query.equalTo('isSent', true);
    query.addDescending('_updated_at');
    return db.query(query).then(result => {
      const surveys = [];
      for (let i = 0; i < result.length; i++) {
        surveys.push(new Survey(result[i]));
      }
      return surveys;
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
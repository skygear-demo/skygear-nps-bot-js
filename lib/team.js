'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const skygear = require('skygear');
const Bot = require('./bot');
const db = require('./db');
const Survey = require('./survey');

module.exports = class Team {
  constructor(record) {
    this._record = record;
  }

  // create
  static get Record() {
    return skygear.Record.extend('team');
  }

  static create(slackID, token, targetsID) {
    return _asyncToGenerator(function* () {
      const record = yield db.save(new Team.Record({ slackID, token, targetsID }));
      return new Team(record);
    })();
  }

  // read
  get slackID() {
    return this._record['slackID'];
  }

  get token() {
    return this._record['token'];
  }

  get targetsID() {
    return this._record['targetsID'];
  }

  static of(slackID) {
    return _asyncToGenerator(function* () {
      const query = new skygear.Query(Team.Record);
      query.equalTo('slackID', slackID);

      const result = yield db.query(query);
      if (result.length > 1) {
        throw new Error(`Mutiple teams with identical slackID ${slackID} found`);
      }
      return result[0] ? new Team(result[0]) : null;
    })();
  }

  // update
  set token(newValue) {
    this._record['token'] = newValue;
  }

  set targetsID(newValue) {
    this._record['targetsID'] = newValue;
  }

  update() {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this._record = yield db.save(_this._record);
    })();
  }

  // misc
  get bot() {
    return new Bot(this.token);
  }

  get members() {
    return this.bot.fetchUsers();
  }

  get scheduledSurvey() {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', this.slackID);
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error('Mutiple scheduled survey found');
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }

  get lastestSurvey() {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', this.slackID);
    query.equalTo('isSent', true);
    query.addDescending('_updated_at');
    return db.query(query).then(result => {
      return result[0] ? new Survey(result[0]) : null;
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZWFtLmpzIl0sIm5hbWVzIjpbInNreWdlYXIiLCJyZXF1aXJlIiwiQm90IiwiZGIiLCJTdXJ2ZXkiLCJtb2R1bGUiLCJleHBvcnRzIiwiVGVhbSIsImNvbnN0cnVjdG9yIiwicmVjb3JkIiwiX3JlY29yZCIsIlJlY29yZCIsImV4dGVuZCIsImNyZWF0ZSIsInNsYWNrSUQiLCJ0b2tlbiIsInRhcmdldHNJRCIsInNhdmUiLCJvZiIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwicmVzdWx0IiwibGVuZ3RoIiwiRXJyb3IiLCJuZXdWYWx1ZSIsInVwZGF0ZSIsImJvdCIsIm1lbWJlcnMiLCJmZXRjaFVzZXJzIiwic2NoZWR1bGVkU3VydmV5IiwidGhlbiIsImxhc3Rlc3RTdXJ2ZXkiLCJhZGREZXNjZW5kaW5nIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsVUFBVUMsUUFBUSxTQUFSLENBQWhCO0FBQ0EsTUFBTUMsTUFBTUQsUUFBUSxPQUFSLENBQVo7QUFDQSxNQUFNRSxLQUFLRixRQUFRLE1BQVIsQ0FBWDtBQUNBLE1BQU1HLFNBQVNILFFBQVEsVUFBUixDQUFmOztBQUVBSSxPQUFPQyxPQUFQLEdBQWlCLE1BQU1DLElBQU4sQ0FBVztBQUMxQkMsY0FBYUMsTUFBYixFQUFxQjtBQUNuQixTQUFLQyxPQUFMLEdBQWVELE1BQWY7QUFDRDs7QUFFRDtBQUNBLGFBQVdFLE1BQVgsR0FBcUI7QUFDbkIsV0FBT1gsUUFBUVcsTUFBUixDQUFlQyxNQUFmLENBQXNCLE1BQXRCLENBQVA7QUFDRDs7QUFFRCxTQUFhQyxNQUFiLENBQXFCQyxPQUFyQixFQUE4QkMsS0FBOUIsRUFBcUNDLFNBQXJDLEVBQWdEO0FBQUE7QUFDOUMsWUFBTVAsU0FBUyxNQUFNTixHQUFHYyxJQUFILENBQVEsSUFBSVYsS0FBS0ksTUFBVCxDQUFnQixFQUFFRyxPQUFGLEVBQVdDLEtBQVgsRUFBa0JDLFNBQWxCLEVBQWhCLENBQVIsQ0FBckI7QUFDQSxhQUFPLElBQUlU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anMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBza3lnZWFyID0gcmVxdWlyZSgnc2t5Z2VhcicpXG5jb25zdCBCb3QgPSByZXF1aXJlKCcuL2JvdCcpXG5jb25zdCBkYiA9IHJlcXVpcmUoJy4vZGInKVxuY29uc3QgU3VydmV5ID0gcmVxdWlyZSgnLi9zdXJ2ZXknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFRlYW0ge1xuICBjb25zdHJ1Y3RvciAocmVjb3JkKSB7XG4gICAgdGhpcy5fcmVjb3JkID0gcmVjb3JkXG4gIH1cblxuICAvLyBjcmVhdGVcbiAgc3RhdGljIGdldCBSZWNvcmQgKCkge1xuICAgIHJldHVybiBza3lnZWFyLlJlY29yZC5leHRlbmQoJ3RlYW0nKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAoc2xhY2tJRCwgdG9rZW4sIHRhcmdldHNJRCkge1xuICAgIGNvbnN0IHJlY29yZCA9IGF3YWl0IGRiLnNhdmUobmV3IFRlYW0uUmVjb3JkKHsgc2xhY2tJRCwgdG9rZW4sIHRhcmdldHNJRCB9KSlcbiAgICByZXR1cm4gbmV3IFRlYW0ocmVjb3JkKVxuICB9XG5cbiAgLy8gcmVhZFxuICBnZXQgc2xhY2tJRCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsnc2xhY2tJRCddXG4gIH1cblxuICBnZXQgdG9rZW4gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRbJ3Rva2VuJ11cbiAgfVxuXG4gIGdldCB0YXJnZXRzSUQgKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRbJ3RhcmdldHNJRCddXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgb2YgKHNsYWNrSUQpIHtcbiAgICBjb25zdCBxdWVyeSA9IG5ldyBza3lnZWFyLlF1ZXJ5KFRlYW0uUmVjb3JkKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ3NsYWNrSUQnLCBzbGFja0lEKVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIucXVlcnkocXVlcnkpXG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE11dGlwbGUgdGVhbXMgd2l0aCBpZGVudGljYWwgc2xhY2tJRCAke3NsYWNrSUR9IGZvdW5kYClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFswXSA/IG5ldyBUZWFtKHJlc3VsdFswXSkgOiBudWxsXG4gIH1cblxuICAvLyB1cGRhdGVcbiAgc2V0IHRva2VuIChuZXdWYWx1ZSkge1xuICAgIHRoaXMuX3JlY29yZFsndG9rZW4nXSA9IG5ld1ZhbHVlXG4gIH1cblxuICBzZXQgdGFyZ2V0c0lEIChuZXdWYWx1ZSkge1xuICAgIHRoaXMuX3JlY29yZFsndGFyZ2V0c0lEJ10gPSBuZXdWYWx1ZVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlICgpIHtcbiAgICB0aGlzLl9yZWNvcmQgPSBhd2FpdCBkYi5zYXZlKHRoaXMuX3JlY29yZClcbiAgfVxuXG4gIC8vIG1pc2NcbiAgZ2V0IGJvdCAoKSB7XG4gICAgcmV0dXJuIG5ldyBCb3QodGhpcy50b2tlbilcbiAgfVxuXG4gIGdldCBtZW1iZXJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5ib3QuZmV0Y2hVc2VycygpXG4gIH1cblxuICBnZXQgc2NoZWR1bGVkU3VydmV5ICgpIHtcbiAgICBjb25zdCBxdWVyeSA9IG5ldyBza3lnZWFyLlF1ZXJ5KFN1cnZleS5SZWNvcmQpXG4gICAgcXVlcnkuZXF1YWxUbygndGVhbUlEJywgdGhpcy5zbGFja0lEKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ2lzU2VudCcsIGZhbHNlKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXV0aXBsZSBzY2hlZHVsZWQgc3VydmV5IGZvdW5kJylcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRbMF0gPyBuZXcgU3VydmV5KHJlc3VsdFswXSkgOiBudWxsXG4gICAgfSlcbiAgfVxuXG4gIGdldCBsYXN0ZXN0U3VydmV5ICgpIHtcbiAgICBjb25zdCBxdWVyeSA9IG5ldyBza3lnZWFyLlF1ZXJ5KFN1cnZleS5SZWNvcmQpXG4gICAgcXVlcnkuZXF1YWxUbygndGVhbUlEJywgdGhpcy5zbGFja0lEKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ2lzU2VudCcsIHRydWUpXG4gICAgcXVlcnkuYWRkRGVzY2VuZGluZygnX3VwZGF0ZWRfYXQnKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgcmV0dXJuIHJlc3VsdFswXSA/IG5ldyBTdXJ2ZXkocmVzdWx0WzBdKSA6IG51bGxcbiAgICB9KVxuICB9XG59XG4iXX0=
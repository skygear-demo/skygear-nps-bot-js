'use strict';

const skygearCloud = require('skygear/cloud');
const { DEVELOPMENT_MODE } = require('./config');
const { handleOAuth, handleCommand, handleAction, handleEvent } = require('./handlers');
const { distributeScheduledSurvey } = require('./tasks');

/**
 * Check availability after a git push
 */
skygearCloud.handler('ping', req => 'Hello, world\n', {
  method: ['GET'],
  userRequired: false
});

/**
 * Test any new feature here
 */
skygearCloud.handler('dev', req => {}, {
  method: ['GET'],
  userRequired: false
});

skygearCloud.handler('oauth', handleOAuth, {
  method: ['GET'],
  userRequired: false
});

skygearCloud.handler('command', handleCommand, {
  method: ['POST'],
  userRequired: false
});

skygearCloud.handler('action', handleAction, {
  method: ['POST'],
  userRequired: false
});

skygearCloud.handler('event', handleEvent, {
  method: ['POST'],
  userRequired: false
});

skygearCloud.every(DEVELOPMENT_MODE ? '@every 30s' : '@weekly', distributeScheduledSurvey.bind(null, 'weekly'));

skygearCloud.every(DEVELOPMENT_MODE ? '@every 40s' : '@monthly', distributeScheduledSurvey.bind(null, 'monthly'));

skygearCloud.every(DEVELOPMENT_MODE ? '@every 50s' : '0 0 0 1 */3 *', distributeScheduledSurvey.bind(null, 'quarterly'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJza3lnZWFyQ2xvdWQiLCJyZXF1aXJlIiwiREVWRUxPUE1FTlRfTU9ERSIsImhhbmRsZU9BdXRoIiwiaGFuZGxlQ29tbWFuZCIsImhhbmRsZUFjdGlvbiIsImhhbmRsZUV2ZW50IiwiZGlzdHJpYnV0ZVNjaGVkdWxlZFN1cnZleSIsImhhbmRsZXIiLCJyZXEiLCJtZXRob2QiLCJ1c2VyUmVxdWlyZWQiLCJldmVyeSIsImJpbmQiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsZUFBZUMsUUFBUSxlQUFSLENBQXJCO0FBQ0EsTUFBTSxFQUFFQyxnQkFBRixLQUF1QkQsUUFBUSxVQUFSLENBQTdCO0FBQ0EsTUFBTSxFQUFFRSxXQUFGLEVBQWVDLGFBQWYsRUFBOEJDLFlBQTlCLEVBQTRDQyxXQUE1QyxLQUE0REwsUUFBUSxZQUFSLENBQWxFO0FBQ0EsTUFBTSxFQUFFTSx5QkFBRixLQUFnQ04sUUFBUSxTQUFSLENBQXRDOztBQUVBOzs7QUFHQUQsYUFBYVEsT0FBYixDQUFxQixNQUFyQixFQUE2QkMsT0FBTyxnQkFBcEMsRUFBc0Q7QUFDcERDLFVBQVEsQ0FBQyxLQUFELENBRDRDO0FBRXBEQyxnQkFBYztBQUZzQyxDQUF0RDs7QUFLQTs7O0FBR0FYLGFBQWFRLE9BQWIsQ0FBcUIsS0FBckIsRUFBNEJDLE9BQU8sQ0FFbEMsQ0FGRCxFQUVHO0FBQ0RDLFVBQVEsQ0FBQyxLQUFELENBRFA7QUFFREMsZ0JBQWM7QUFGYixDQUZIOztBQU9BWCxhQUFhUSxPQUFiLENBQXFCLE9BQXJCLEVBQThCTCxXQUE5QixFQUEyQztBQUN6Q08sVUFBUSxDQUFDLEtBQUQsQ0FEaUM7QUFFekNDLGdCQUFjO0FBRjJCLENBQTNDOztBQUtBWCxhQUFhUSxPQUFiLENBQXFCLFNBQXJCLEVBQWdDSixhQUFoQyxFQUErQztBQUM3Q00sVUFBUSxDQUFDLE1BQUQsQ0FEcUM7QUFFN0NDLGdCQUFjO0FBRitCLENBQS9DOztBQUtBWCxhQUFhUSxPQUFiLENBQXFCLFFBQXJCLEVBQStCSCxZQUEvQixFQUE2QztBQUMzQ0ssVUFBUSxDQUFDLE1BQUQsQ0FEbUM7QUFFM0NDLGdCQUFjO0FBRjZCLENBQTdDOztBQUtBWCxhQUFhUSxPQUFiLENBQXFCLE9BQXJCLEVBQThCRixXQUE5QixFQUEyQztBQUN6Q0ksVUFBUSxDQUFDLE1BQUQsQ0FEaUM7QUFFekNDLGdCQUFjO0FBRjJCLENBQTNDOztBQUtBWCxhQUFhWSxLQUFiLENBQW1CVixtQkFBbUIsWUFBbkIsR0FBa0MsU0FBckQsRUFBZ0VLLDBCQUEwQk0sSUFBMUIsQ0FBK0IsSUFBL0IsRUFBcUMsUUFBckMsQ0FBaEU7O0FBRUFiLGFBQWFZLEtBQWIsQ0FBbUJWLG1CQUFtQixZQUFuQixHQUFrQyxVQUFyRCxFQUFpRUssMEJBQTBCTSxJQUExQixDQUErQixJQUEvQixFQUFxQyxTQUFyQyxDQUFqRTs7QUFFQWIsYUFBYVksS0FBYixDQUFtQlYsbUJBQW1CLFlBQW5CLEdBQWtDLGVBQXJELEVBQXNFSywwQkFBMEJNLElBQTFCLENBQStCLElBQS9CLEVBQXFDLFdBQXJDLENBQXRFIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2t5Z2VhckNsb3VkID0gcmVxdWlyZSgnc2t5Z2Vhci9jbG91ZCcpXG5jb25zdCB7IERFVkVMT1BNRU5UX01PREUgfSA9IHJlcXVpcmUoJy4vY29uZmlnJylcbmNvbnN0IHsgaGFuZGxlT0F1dGgsIGhhbmRsZUNvbW1hbmQsIGhhbmRsZUFjdGlvbiwgaGFuZGxlRXZlbnQgfSA9IHJlcXVpcmUoJy4vaGFuZGxlcnMnKVxuY29uc3QgeyBkaXN0cmlidXRlU2NoZWR1bGVkU3VydmV5IH0gPSByZXF1aXJlKCcuL3Rhc2tzJylcblxuLyoqXG4gKiBDaGVjayBhdmFpbGFiaWxpdHkgYWZ0ZXIgYSBnaXQgcHVzaFxuICovXG5za3lnZWFyQ2xvdWQuaGFuZGxlcigncGluZycsIHJlcSA9PiAnSGVsbG8sIHdvcmxkXFxuJywge1xuICBtZXRob2Q6IFsnR0VUJ10sXG4gIHVzZXJSZXF1aXJlZDogZmFsc2Vcbn0pXG5cbi8qKlxuICogVGVzdCBhbnkgbmV3IGZlYXR1cmUgaGVyZVxuICovXG5za3lnZWFyQ2xvdWQuaGFuZGxlcignZGV2JywgcmVxID0+IHtcblxufSwge1xuICBtZXRob2Q6IFsnR0VUJ10sXG4gIHVzZXJSZXF1aXJlZDogZmFsc2Vcbn0pXG5cbnNreWdlYXJDbG91ZC5oYW5kbGVyKCdvYXV0aCcsIGhhbmRsZU9BdXRoLCB7XG4gIG1ldGhvZDogWydHRVQnXSxcbiAgdXNlclJlcXVpcmVkOiBmYWxzZVxufSlcblxuc2t5Z2VhckNsb3VkLmhhbmRsZXIoJ2NvbW1hbmQnLCBoYW5kbGVDb21tYW5kLCB7XG4gIG1ldGhvZDogWydQT1NUJ10sXG4gIHVzZXJSZXF1aXJlZDogZmFsc2Vcbn0pXG5cbnNreWdlYXJDbG91ZC5oYW5kbGVyKCdhY3Rpb24nLCBoYW5kbGVBY3Rpb24sIHtcbiAgbWV0aG9kOiBbJ1BPU1QnXSxcbiAgdXNlclJlcXVpcmVkOiBmYWxzZVxufSlcblxuc2t5Z2VhckNsb3VkLmhhbmRsZXIoJ2V2ZW50JywgaGFuZGxlRXZlbnQsIHtcbiAgbWV0aG9kOiBbJ1BPU1QnXSxcbiAgdXNlclJlcXVpcmVkOiBmYWxzZVxufSlcblxuc2t5Z2VhckNsb3VkLmV2ZXJ5KERFVkVMT1BNRU5UX01PREUgPyAnQGV2ZXJ5IDMwcycgOiAnQHdlZWtseScsIGRpc3RyaWJ1dGVTY2hlZHVsZWRTdXJ2ZXkuYmluZChudWxsLCAnd2Vla2x5JykpXG5cbnNreWdlYXJDbG91ZC5ldmVyeShERVZFTE9QTUVOVF9NT0RFID8gJ0BldmVyeSA0MHMnIDogJ0Btb250aGx5JywgZGlzdHJpYnV0ZVNjaGVkdWxlZFN1cnZleS5iaW5kKG51bGwsICdtb250aGx5JykpXG5cbnNreWdlYXJDbG91ZC5ldmVyeShERVZFTE9QTUVOVF9NT0RFID8gJ0BldmVyeSA1MHMnIDogJzAgMCAwIDEgKi8zIConLCBkaXN0cmlidXRlU2NoZWR1bGVkU3VydmV5LmJpbmQobnVsbCwgJ3F1YXJ0ZXJseScpKVxuIl19
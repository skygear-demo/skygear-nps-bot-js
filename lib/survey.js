'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const skygear = require('skygear');
const db = require('./db');
const Reply = require('./reply');

module.exports = class Survey {
  constructor(record) {
    this._record = record;
  }

  // create
  static get Record() {
    return skygear.Record.extend('survey');
  }

  static create(teamID, frequency, targetsID) {
    return _asyncToGenerator(function* () {
      const record = yield db.save(new Survey.Record({
        teamID,
        frequency,
        targetsID,
        isSent: false
      }));
      return new Survey(record);
    })();
  }

  // read
  get id() {
    return this._record['id'];
  }

  get teamID() {
    return this._record['teamID'];
  }

  get frequency() {
    return this._record['frequency'];
  }

  get targetsID() {
    return this._record['targetsID'];
  }

  get isSent() {
    return this._record['isSent'];
  }

  static get weekly() {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('frequency', 'weekly');
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      const surveys = [];
      for (let i = 0; i < result.length; i++) {
        surveys.push(new Survey(result[i]));
      }
      return surveys;
    });
  }

  static get monthly() {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('frequency', 'monthly');
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      const surveys = [];
      for (let i = 0; i < result.length; i++) {
        surveys.push(new Survey(result[i]));
      }
      return surveys;
    });
  }

  static get quarterly() {
    const query = new skygear.Query(Survey.Record);
    query.equalTo('frequency', 'quarterly');
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      const surveys = [];
      for (let i = 0; i < result.length; i++) {
        surveys.push(new Survey(result[i]));
      }
      return surveys;
    });
  }

  // update
  set isSent(newValue) {
    this._record['isSent'] = newValue;
  }

  update() {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this._record = yield db.save(_this._record);
    })();
  }

  // delete
  delete() {
    db.delete(this._record);
  }

  // misc
  get respondentsID() {
    const query = new skygear.Query(Reply.Record);
    query.equalTo('survey', new skygear.Reference(this._record));

    return db.query(query).then(result => {
      const respondents = [];
      for (let i = 0; i < result.length; i++) {
        respondents.push(result[i].userID);
      }
      return respondents;
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdXJ2ZXkuanMiXSwibmFtZXMiOlsic2t5Z2VhciIsInJlcXVpcmUiLCJkYiIsIlJlcGx5IiwibW9kdWxlIiwiZXhwb3J0cyIsIlN1cnZleSIsImNvbnN0cnVjdG9yIiwicmVjb3JkIiwiX3JlY29yZCIsIlJlY29yZCIsImV4dGVuZCIsImNyZWF0ZSIsInRlYW1JRCIsImZyZXF1ZW5jeSIsInRhcmdldHNJRCIsInNhdmUiLCJpc1NlbnQiLCJpZCIsIndlZWtseSIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwidGhlbiIsInJlc3VsdCIsInN1cnZleXMiLCJpIiwibGVuZ3RoIiwicHVzaCIsIm1vbnRobHkiLCJxdWFydGVybHkiLCJuZXdWYWx1ZSIsInVwZGF0ZSIsImRlbGV0ZSIsInJlc3BvbmRlbnRzSUQiLCJSZWZlcmVuY2UiLCJyZXNwb25kZW50cyIsInVzZXJJRCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFVBQVVDLFFBQVEsU0FBUixDQUFoQjtBQUNBLE1BQU1DLEtBQUtELFFBQVEsTUFBUixDQUFYO0FBQ0EsTUFBTUUsUUFBUUYsUUFBUSxTQUFSLENBQWQ7O0FBRUFHLE9BQU9DLE9BQVAsR0FBaUIsTUFBTUMsTUFBTixDQUFhO0FBQzVCQyxjQUFhQyxNQUFiLEVBQXFCO0FBQ25CLFNBQUtDLE9BQUwsR0FBZUQsTUFBZjtBQUNEOztBQUVEO0FBQ0EsYUFBV0UsTUFBWCxHQUFxQjtBQUNuQixXQUFPVixRQUFRVSxNQUFSLENBQWVDLE1BQWYsQ0FBc0IsUUFBdEIsQ0FBUDtBQUNEOztBQUVELFNBQWFDLE1BQWIsQ0FBcUJDLE1BQXJCLEVBQTZCQyxTQUE3QixFQUF3Q0MsU0FBeEMsRUFBbUQ7QUFBQTtBQUNqRCxZQUFNUCxTQUFTLE1BQU1OLEdBQUdjLElBQUgsQ0FBUSxJQUFJVixPQUFPSSxNQUFYLENBQWtCO0FBQzdDRyxjQUQ2QztBQUU3Q0MsaUJBRjZDO0FBRzdDQyxpQkFINkM7QUFJN0NFLGdCQUFRO0FBSnFDLE9BQWxC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QUFLUCxPQUFiLENBQXJCO0FBRGM7QUFFZjs7QUFFRDtBQUNBd0IsV0FBVTtBQUNSL0IsT0FBRytCLE1BQUgsQ0FBVSxLQUFLeEIsT0FBZjtBQUNEOztBQUVEO0FBQ0EsTUFBSXlCLGFBQUosR0FBcUI7QUFDbkIsVUFBTWQsUUFBUSxJQUFJcEIsUUFBUXFCLEtBQVosQ0FBa0JsQixNQUFNTyxNQUF4QixDQUFkO0FBQ0FVLFVBQU1FLE9BQU4sQ0FBYyxRQUFkLEVBQXdCLElBQUl0QixRQUFRbUMsU0FBWixDQUFzQixLQUFLMUIsT0FBM0IsQ0FBeEI7O0FBRUEsV0FBT1AsR0FBR2tCLEtBQUgsQ0FBU0EsS0FBVCxFQUFnQkcsSUFBaEIsQ0FBcUJDLFVBQVU7QUFDcEMsWUFBTVksY0FBYyxFQUFwQjtBQUNBLFdBQUssSUFBSVYsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixPQUFPRyxNQUEzQixFQUFtQ0QsR0FBbkMsRUFBd0M7QUFDdENVLG9CQUFZUixJQUFaLENBQWlCSixPQUFPRSxDQUFQLEVBQVVXLE1BQTNCO0FBQ0Q7QUFDRCxhQUFPRCxXQUFQO0FBQ0QsS0FOTSxDQUFQO0FBT0Q7QUExRzJCLENBQTlCIiwiZmlsZSI6InN1cnZleS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNreWdlYXIgPSByZXF1aXJlKCdza3lnZWFyJylcbmNvbnN0IGRiID0gcmVxdWlyZSgnLi9kYicpXG5jb25zdCBSZXBseSA9IHJlcXVpcmUoJy4vcmVwbHknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFN1cnZleSB7XG4gIGNvbnN0cnVjdG9yIChyZWNvcmQpIHtcbiAgICB0aGlzLl9yZWNvcmQgPSByZWNvcmRcbiAgfVxuXG4gIC8vIGNyZWF0ZVxuICBzdGF0aWMgZ2V0IFJlY29yZCAoKSB7XG4gICAgcmV0dXJuIHNreWdlYXIuUmVjb3JkLmV4dGVuZCgnc3VydmV5JylcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKHRlYW1JRCwgZnJlcXVlbmN5LCB0YXJnZXRzSUQpIHtcbiAgICBjb25zdCByZWNvcmQgPSBhd2FpdCBkYi5zYXZlKG5ldyBTdXJ2ZXkuUmVjb3JkKHtcbiAgICAgIHRlYW1JRCxcbiAgICAgIGZyZXF1ZW5jeSxcbiAgICAgIHRhcmdldHNJRCxcbiAgICAgIGlzU2VudDogZmFsc2VcbiAgICB9KSlcbiAgICByZXR1cm4gbmV3IFN1cnZleShyZWNvcmQpXG4gIH1cblxuICAvLyByZWFkXG4gIGdldCBpZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsnaWQnXVxuICB9XG5cbiAgZ2V0IHRlYW1JRCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsndGVhbUlEJ11cbiAgfVxuXG4gIGdldCBmcmVxdWVuY3kgKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRbJ2ZyZXF1ZW5jeSddXG4gIH1cblxuICBnZXQgdGFyZ2V0c0lEICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkWyd0YXJnZXRzSUQnXVxuICB9XG5cbiAgZ2V0IGlzU2VudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsnaXNTZW50J11cbiAgfVxuXG4gIHN0YXRpYyBnZXQgd2Vla2x5ICgpIHtcbiAgICBjb25zdCBxdWVyeSA9IG5ldyBza3lnZWFyLlF1ZXJ5KFN1cnZleS5SZWNvcmQpXG4gICAgcXVlcnkuZXF1YWxUbygnZnJlcXVlbmN5JywgJ3dlZWtseScpXG4gICAgcXVlcnkuZXF1YWxUbygnaXNTZW50JywgZmFsc2UpXG4gICAgcmV0dXJuIGRiLnF1ZXJ5KHF1ZXJ5KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBjb25zdCBzdXJ2ZXlzID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN1cnZleXMucHVzaChuZXcgU3VydmV5KHJlc3VsdFtpXSkpXG4gICAgICB9XG4gICAgICByZXR1cm4gc3VydmV5c1xuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgZ2V0IG1vbnRobHkgKCkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IHNreWdlYXIuUXVlcnkoU3VydmV5LlJlY29yZClcbiAgICBxdWVyeS5lcXVhbFRvKCdmcmVxdWVuY3knLCAnbW9udGhseScpXG4gICAgcXVlcnkuZXF1YWxUbygnaXNTZW50JywgZmFsc2UpXG4gICAgcmV0dXJuIGRiLnF1ZXJ5KHF1ZXJ5KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBjb25zdCBzdXJ2ZXlzID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN1cnZleXMucHVzaChuZXcgU3VydmV5KHJlc3VsdFtpXSkpXG4gICAgICB9XG4gICAgICByZXR1cm4gc3VydmV5c1xuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgZ2V0IHF1YXJ0ZXJseSAoKSB7XG4gICAgY29uc3QgcXVlcnkgPSBuZXcgc2t5Z2Vhci5RdWVyeShTdXJ2ZXkuUmVjb3JkKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ2ZyZXF1ZW5jeScsICdxdWFydGVybHknKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ2lzU2VudCcsIGZhbHNlKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgY29uc3Qgc3VydmV5cyA9IFtdXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdXJ2ZXlzLnB1c2gobmV3IFN1cnZleShyZXN1bHRbaV0pKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cnZleXNcbiAgICB9KVxuICB9XG5cbiAgLy8gdXBkYXRlXG4gIHNldCBpc1NlbnQgKG5ld1ZhbHVlKSB7XG4gICAgdGhpcy5fcmVjb3JkWydpc1NlbnQnXSA9IG5ld1ZhbHVlXG4gIH1cblxuICBhc3luYyB1cGRhdGUgKCkge1xuICAgIHRoaXMuX3JlY29yZCA9IGF3YWl0IGRiLnNhdmUodGhpcy5fcmVjb3JkKVxuICB9XG5cbiAgLy8gZGVsZXRlXG4gIGRlbGV0ZSAoKSB7XG4gICAgZGIuZGVsZXRlKHRoaXMuX3JlY29yZClcbiAgfVxuXG4gIC8vIG1pc2NcbiAgZ2V0IHJlc3BvbmRlbnRzSUQgKCkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IHNreWdlYXIuUXVlcnkoUmVwbHkuUmVjb3JkKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ3N1cnZleScsIG5ldyBza3lnZWFyLlJlZmVyZW5jZSh0aGlzLl9yZWNvcmQpKVxuXG4gICAgcmV0dXJuIGRiLnF1ZXJ5KHF1ZXJ5KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBjb25zdCByZXNwb25kZW50cyA9IFtdXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXNwb25kZW50cy5wdXNoKHJlc3VsdFtpXS51c2VySUQpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzcG9uZGVudHNcbiAgICB9KVxuICB9XG59XG4iXX0=